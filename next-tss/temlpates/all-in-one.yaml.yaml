# ====================================================================
# PostgreSQL Service (Wave 0)
# ====================================================================
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "argocd.argoproj.io/sync-wave": "0"
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app.kubernetes.io.name: postgres
    app.kubernetes.io/instance: "{{ .Release.Name }}"

---
# ====================================================================
# PostgreSQL StatefulSet (Wave 0)
# ====================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "argocd.argoproj.io/sync-wave": "0"
spec:
  serviceName: "db"
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: "{{ .Release.Name }}"
    spec:
      containers:
      - name: postgres
        image: "{{ .Values.postgresql.image }}"
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - secretRef:
            name: postgres-secret
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "{{ .Values.postgresql.storage.storageClassName }}"
      resources:
        requests:
          storage: "{{ .Values.postgresql.storage.size }}"

---
# ====================================================================
# Migration Job (Wave 1)
# ====================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-migrate-seed"
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "argocd.argoproj.io/hook": "Sync"
    "argocd.argoproj.io/sync-wave": "1"
    "argocd.argoproj.io/hook-delete-policy": "BeforeHookCreation,HookSucceeded"
spec:
  template:
    spec:
      containers:
      - name: migrator-seeder
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default "latest" }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - "/bin/sh"
          - "-c"
          - "npx prisma migrate deploy && node /app/prisma/dist/seed.js"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: DATABASE_URL
      restartPolicy: Never
  backoffLimit: 2

---
# ====================================================================
# Next.js App Service (Wave 2)
# ====================================================================
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}"
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "argocd.argoproj.io/sync-wave": "2"
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: next-chart
    app.kubernetes.io/instance: "{{ .Release.Name }}"

---
# ====================================================================
# Next.js App Deployment (Wave 2)
# ====================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}"
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "argocd.argoproj.io/sync-wave": "2"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: next-chart
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: next-chart
        app.kubernetes.io/instance: "{{ .Release.Name }}"
    spec:
      containers:
        - name: next-chart
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default "latest" }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: DATABASE_URL
---
# ====================================================================
# Ingress (Wave 3) - アプリへの入口
# ====================================================================
{{- if .Values.ingress.enabled -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Release.Name }}"
  namespace: "{{ .Release.Namespace }}"
  annotations:
    # sync-waveを"3"にすることで、アプリ(Wave 2)が準備できた後に作られるようにする
    "argocd.argoproj.io/sync-wave": "3"
    {{- toYaml .Values.ingress.annotations | nindent 4 }}
spec:
  ingressClassName: {{ .Values.ingress.className }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- toYaml .hosts | nindent 8 }}
      secretName: {{ .secretName }}
  {{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
        {{- range .paths }}
          - path: {{ .path }}
            pathType: {{ .pathType }}
            backend:
              service:
                name: "{{ $.Release.Name }}"
                port:
                  number: {{ $.Values.service.port }}
        {{- end }}
  {{- end }}
{{- end }}

