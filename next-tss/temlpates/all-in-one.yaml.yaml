# ====================================================================
# PostgreSQL Service (Wave 0)
# 役割: データベースの電話帳
# ====================================================================
apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: next
  annotations:
    "argocd.argoproj.io/sync-wave": "0" # 第0陣として、最優先でデプロイする
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: nextjs-tss-pre # 例としてリリース名を設定

---
# ====================================================================
# PostgreSQL StatefulSet (Wave 0)
# 役割: データベースの家（Pod）と倉庫（PVC）
# ====================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: next
  annotations:
    "argocd.argoproj.io/sync-wave": "0" # 第0陣として、最優先でデプロイする
spec:
  serviceName: "db"
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: nextjs-tss-pre # 例としてリリース名を設定
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: nextjs-tss-pre # ServiceがこのPodを見つけられるようにする
    spec:
      containers:
      - name: postgres
        image: "postgres:15"
        ports:
        - containerPort: 5432
          name: postgres
        envFrom:
        - secretRef:
            name: postgres-secret # 事前に作っておいたSecretを参照
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "1Gi"

---
# ====================================================================
# Migration Job (Wave 1)
# 役割: マイグレーションとシーディングを実行する職人さん
# ====================================================================
apiVersion: batch/v1
kind: Job
metadata:
  name: nextjs-tss-pre-migrate-seed # Helmを使わないので、名前を固定
  namespace: next
  annotations:
    "argocd.argoproj.io/hook": "Sync"
    "argocd.argoproj.io/sync-wave": "1" # DB(wave:0)の後に実行
    "argocd.argoproj.io/hook-delete-policy": "BeforeHookCreation,HookSucceeded"
spec:
  template:
    spec:
      containers:
      - name: migrator-seeder
        # ★注意: このイメージタグはCI/CDで動的に設定する必要があるかもしれんで
        image: "rnagashiro/my-nextjs-app:latest"
        imagePullPolicy: IfNotPresent
        command:
          - "/bin/sh"
          - "-c"
          - "npx prisma migrate deploy && node /app/prisma/dist/seed.js"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: DATABASE_URL
      restartPolicy: Never
  backoffLimit: 2

---
# ====================================================================
# Next.js App Service (Wave 2)
# 役割: Next.jsアプリの電話帳
# ====================================================================
apiVersion: v1
kind: Service
metadata:
  name: nextjs-tss-pre
  namespace: next
  annotations:
    "argocd.argoproj.io/sync-wave": "2" # マイグレーション(wave:1)の後に実行
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: next-chart
    app.kubernetes.io/instance: nextjs-tss-pre

---
# ====================================================================
# Next.js App Deployment (Wave 2)
# 役割: Next.jsアプリの家（Pod）
# ====================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextjs-tss-pre
  namespace: next
  annotations:
    "argocd.argoproj.io/sync-wave": "2" # マイグレーション(wave:1)の後に実行
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: next-chart
      app.kubernetes.io/instance: nextjs-tss-pre
  template:
    metadata:
      labels:
        app.kubernetes.io/name: next-chart
        app.kubernetes.io/instance: nextjs-tss-pre
    spec:
      containers:
        - name: next-chart
          # ★注意: このイメージタグはCI/CDで動的に設定する必要があるかもしれんで
          image: "rnagashiro/my-nextjs-app:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: DATABASE_URL
