# templates/job-migrate.yaml
{{- if .Values.migration.enabled -}} # values.yamlで有効化した場合のみJobを作成
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-migrate-job
  labels:
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }} # <- このように書き換える
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-5"
    # hook-succeeded: Jobが成功したら、このJobリソースを削除
    # before-hook-creation: 新しいJobを作る前に、もし古い同じ名前のJobがあれば先に削除
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
spec:
  template:
    metadata:
      name: {{ .Release.Name }}-migrate-job
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      # Podが失敗したら再起動しない（失敗原因をログで調査しやすくするため）
      restartPolicy: Never
      containers:
        - name: migrate
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["npm", "run", "db:deploy"]
          env:
            - name: PG_PASSWORD # 1. まず 'password' キーからパスワードを読み込む
              valueFrom:
                secretKeyRef:
                  name: my-release-postgresql
                  key: password # ★確定したキー名 'password' を指定
            - name: DATABASE_URL # 2. 読み込んだパスワードを使って完全な接続URLを組み立てる
              value: "postgresql://postgres:$(PG_PASSWORD)@my-release-postgresql:5432/postgres?schema=public"
            # 他に必要な環境変数があればここに追加
  # Jobが完了するまでの時間（デフォルトは600秒）
  backoffLimit: 1
{{- end }}